{
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Member Server API.",
    "license": {
      "name": "MIT",
      "url": "http://opensource.org/licenses/MIT"
    },
    "version": "0.0.1"
  },
  "paths": {
    "/api/assignRFID": {
      "post": {
        "description": "this is an unauthenticated request, for now.\nit assigns an RFID tag to a member",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "member"
        ],
        "summary": "Assigns an RFID tag to a member",
        "operationId": "setRFIDRequest",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AssignRFIDRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/setRFIDResponse"
          }
        }
      }
    },
    "/api/info": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "This will simply respond with some sample info",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "info"
        ],
        "summary": "A simple hello world.",
        "operationId": "info",
        "responses": {
          "200": {
            "$ref": "#/responses/infoResponse"
          }
        }
      }
    },
    "/api/login": {
      "post": {
        "description": "Login accepts some json with the `email` and `password`\nand returns some json that has the token string",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "auth"
        ],
        "summary": "Login",
        "operationId": "loginRequest",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Credentials"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/loginResponse"
          }
        }
      }
    },
    "/api/logout": {
      "post": {
        "description": "Logout does not require a request body",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "auth"
        ],
        "summary": "Logout",
        "operationId": "logoutRequest",
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/member": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "member"
        ],
        "summary": "Returns a list of the members in the system.",
        "operationId": "getMemberList",
        "responses": {
          "200": {
            "$ref": "#/responses/getMemberResponse"
          }
        }
      }
    },
    "/api/payments/charts": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Get Chart information of payments",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "payments"
        ],
        "operationId": "getPaymentChart",
        "responses": {
          "200": {
            "$ref": "#/responses/getPaymentChartResponse"
          }
        }
      }
    },
    "/api/payments/refresh": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Submits a request to update member status information\nThis will reach out to paypal and pull down the latest\ntransaction information and then evaluate each member's\nmembership status\n\nThis should happen automatically every day, but if we decide we\nwant to manually update it.  This will give us the option to do so.",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "payments"
        ],
        "summary": "Refresh payment information",
        "operationId": "getRefreshPayments",
        "responses": {
          "200": {
            "$ref": "#/responses/getPaymentRefreshResponse"
          }
        }
      }
    },
    "/api/register": {
      "post": {
        "description": "Register a new user of the app",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "auth"
        ],
        "operationId": "registerUserRequest",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Credentials"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/endpointSuccessResponse"
          }
        }
      }
    },
    "/api/resource": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "resource"
        ],
        "summary": "Returns a resource.",
        "operationId": "getResourceRequest",
        "responses": {
          "200": {
            "$ref": "#/responses/getResourceResponse"
          }
        }
      },
      "put": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "resource"
        ],
        "summary": "Updates a resource.",
        "operationId": "updateResourceRequest",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/postResourceResponse"
          }
        }
      },
      "delete": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "resource"
        ],
        "summary": "Deletes a resource.",
        "operationId": "deleteResourceRequest",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ResourceDeleteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/resource/member": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "resource"
        ],
        "summary": "Adds a member to a resource.",
        "operationId": "resourceAddMemberRequest",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/memberResourceRelation"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/addMemberToResourceResponse"
          }
        }
      },
      "delete": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "resource"
        ],
        "summary": "Removes a member from a resource.",
        "operationId": "resourceRemoveMemberRequest",
        "responses": {
          "200": {
            "$ref": "#/responses/removeMemberSuccessResponse"
          }
        }
      }
    },
    "/api/resource/member/bulk": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "resource"
        ],
        "summary": "Adds multple members to a resource.",
        "operationId": "resourceBulkMemberRequest",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/membersResourceRelation"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/addMulitpleMembersToResourceResponse"
          }
        }
      }
    },
    "/api/resource/register": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "resource"
        ],
        "summary": "Updates a resource.",
        "operationId": "registerResourceRequest",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RegisterResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/postResourceResponse"
          }
        }
      }
    },
    "/api/resource/status": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Returns the status of all resources.\n0 = Good\n1 = Out of Date\n2 = Offline\n\nif the resource is out of date, it will attempt to push an update",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "resource"
        ],
        "summary": "Returns status of the resources.",
        "operationId": "getResourceStatus",
        "responses": {
          "200": {
            "$ref": "#/responses/getResourceStatusResponse"
          }
        }
      }
    },
    "/api/tier": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "member"
        ],
        "summary": "Returns a list the member tiers.",
        "operationId": "getTiers",
        "responses": {
          "200": {
            "$ref": "#/responses/getTierResponse"
          }
        }
      }
    },
    "/api/user": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "user"
        ],
        "summary": "Returns the current logged in user.",
        "operationId": "user",
        "responses": {
          "200": {
            "$ref": "#/responses/getUserResponse"
          }
        }
      }
    }
  },
  "definitions": {
    "AssignRFIDRequest": {
      "description": "AssignRFIDRequest -- request to associate an rfid to a member",
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "rfid": {
          "type": "string",
          "x-go-name": "RFID"
        }
      },
      "x-go-package": "memberserver/database"
    },
    "Credentials": {
      "description": "Credentials Create a struct that models the structure of a user, both in the request body, and in the DB",
      "type": "object",
      "required": [
        "password"
      ],
      "properties": {
        "email": {
          "description": "Email - the users email",
          "type": "string",
          "x-go-name": "Email"
        },
        "password": {
          "description": "Password - the user's password",
          "type": "string",
          "x-go-name": "Password",
          "example": "somepassword"
        }
      },
      "x-go-package": "memberserver/database"
    },
    "Member": {
      "description": "Member -- a member of the makerspace",
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "memberLevel": {
          "type": "integer",
          "format": "uint8",
          "x-go-name": "Level"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "resources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MemberResource"
          },
          "x-go-name": "Resources"
        },
        "rfid": {
          "type": "string",
          "x-go-name": "RFID"
        }
      },
      "x-go-package": "memberserver/database"
    },
    "MemberResource": {
      "description": "MemberResource a resource that a member belongs to",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "resourceID": {
          "type": "string",
          "x-go-name": "ResourceID"
        }
      },
      "x-go-package": "memberserver/database"
    },
    "MemberResourceRelation": {
      "description": "MemberResourceRelation  - a relationship between resources and members",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "memberID": {
          "type": "string",
          "x-go-name": "MemberID"
        },
        "resourceID": {
          "type": "string",
          "x-go-name": "ResourceID"
        }
      },
      "x-go-package": "memberserver/database"
    },
    "PaymentChart": {
      "description": "PaymentChart - deliver information to the frontend so that\nwe can display a monthly payment chart",
      "type": "object",
      "properties": {
        "cols": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/chartCol"
          },
          "x-go-name": "Cols"
        },
        "options": {
          "$ref": "#/definitions/chartOptions"
        },
        "rows": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "x-go-name": "Rows"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "memberserver/api"
    },
    "RegisterResourceRequest": {
      "description": "Resource a resource that can accespt an access control list",
      "type": "object",
      "required": [
        "name",
        "address"
      ],
      "properties": {
        "address": {
          "description": "Address of the Resource. i.e. where it can be found on the network",
          "type": "string",
          "x-go-name": "Address",
          "example": "address"
        },
        "isDefault": {
          "description": "Default state of the Resource",
          "type": "boolean",
          "x-go-name": "IsDefault",
          "example": true
        },
        "name": {
          "description": "Name of the Resource",
          "type": "string",
          "x-go-name": "Name",
          "example": "name"
        }
      },
      "x-go-package": "memberserver/database"
    },
    "Resource": {
      "description": "Resource a resource that can accespt an access control list",
      "type": "object",
      "required": [
        "id",
        "name",
        "address",
        "isDefault"
      ],
      "properties": {
        "address": {
          "description": "Address of the Resource. i.e. where it can be found on the network",
          "type": "string",
          "x-go-name": "Address",
          "example": "address"
        },
        "id": {
          "description": "UniqueID of the Resource",
          "type": "string",
          "x-go-name": "ID",
          "example": "0"
        },
        "isDefault": {
          "description": "Default state of the Resource",
          "type": "boolean",
          "x-go-name": "IsDefault",
          "example": true
        },
        "name": {
          "description": "Name of the Resource",
          "type": "string",
          "x-go-name": "Name",
          "example": "name"
        }
      },
      "x-go-package": "memberserver/database"
    },
    "ResourceDeleteRequest": {
      "description": "ResourceDeleteRequest - request for deleting a resource",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "UniqueID of the Resource",
          "type": "string",
          "x-go-name": "ID",
          "example": "\"\""
        }
      },
      "x-go-package": "memberserver/database"
    },
    "ResourceRequest": {
      "description": "Resource a resource that can accespt an access control list",
      "type": "object",
      "required": [
        "id",
        "name",
        "address",
        "isDefault"
      ],
      "properties": {
        "address": {
          "description": "Address of the Resource. i.e. where it can be found on the network",
          "type": "string",
          "x-go-name": "Address",
          "example": "address"
        },
        "id": {
          "description": "UniqueID of the Resource",
          "type": "string",
          "x-go-name": "ID",
          "example": "0"
        },
        "isDefault": {
          "description": "Default state of the Resource",
          "type": "boolean",
          "x-go-name": "IsDefault",
          "example": true
        },
        "name": {
          "description": "Name of the Resource",
          "type": "string",
          "x-go-name": "Name",
          "example": "name"
        }
      },
      "x-go-package": "memberserver/database"
    },
    "Tier": {
      "description": "Tier - level of membership",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "uint8",
          "x-go-name": "ID"
        },
        "level": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "memberserver/database"
    },
    "UserResponse": {
      "description": "UserResponse - a user object that we can send as json",
      "type": "object",
      "properties": {
        "email": {
          "description": "Email - user's Email",
          "type": "string",
          "x-go-name": "Email",
          "example": "john@example.com"
        }
      },
      "x-go-package": "memberserver/database"
    },
    "chartCol": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "x-go-name": "Label"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "memberserver/api"
    },
    "chartOptions": {
      "type": "object",
      "properties": {
        "curveType": {
          "type": "string",
          "x-go-name": "CurveType"
        },
        "legend": {
          "type": "string",
          "x-go-name": "Legend"
        },
        "pieHole": {
          "type": "number",
          "format": "double",
          "x-go-name": "PieHole"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        }
      },
      "x-go-package": "memberserver/api"
    },
    "endpointSuccess": {
      "type": "object",
      "properties": {
        "ack": {
          "type": "boolean",
          "x-go-name": "Ack"
        }
      },
      "x-go-package": "memberserver/api"
    },
    "memberResourceRelation": {
      "description": "resource to update or delete a resource",
      "type": "object",
      "required": [
        "resourceID",
        "email"
      ],
      "properties": {
        "email": {
          "description": "Email - this will be the member's email address\nName of the Resource",
          "type": "string",
          "x-go-name": "Email",
          "example": "email"
        },
        "resourceID": {
          "description": "ID of the Resource",
          "type": "string",
          "x-go-name": "ID",
          "example": "string"
        }
      },
      "x-go-package": "memberserver/api"
    },
    "membersResourceRelation": {
      "type": "object",
      "required": [
        "resourceID",
        "emails"
      ],
      "properties": {
        "emails": {
          "description": "Emails - list of member's email address",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Emails",
          "example": []
        },
        "resourceID": {
          "description": "ID of the Resource",
          "type": "string",
          "x-go-name": "ID",
          "example": "string"
        }
      },
      "x-go-package": "memberserver/api"
    },
    "tokenResponse": {
      "description": "tokenReponse for json response of signin",
      "type": "object",
      "properties": {
        "token": {
          "description": "login response to send token string",
          "type": "string",
          "x-go-name": "Token",
          "example": "\"\u003cTOKEN_STRING\u003e\""
        }
      },
      "x-go-package": "memberserver/api"
    }
  },
  "responses": {
    "addMemberToResourceResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/MemberResourceRelation"
      }
    },
    "addMulitpleMembersToResourceResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/MemberResourceRelation"
        }
      }
    },
    "endpointSuccessResponse": {
      "description": "",
      "headers": {
        "ack": {
          "type": "boolean"
        }
      }
    },
    "getMemberResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Member"
        }
      }
    },
    "getPaymentChartResponse": {
      "description": "PaymentResponse response of payment chart information",
      "headers": {
        "paymentCharts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentChart"
          }
        }
      }
    },
    "getPaymentRefreshResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/endpointSuccess"
      },
      "headers": {
        "Body": {}
      }
    },
    "getResourceResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/Resource"
      }
    },
    "getResourceStatusResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "additionalProperties": {
          "type": "integer",
          "format": "uint8"
        }
      }
    },
    "getTierResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Tier"
        }
      }
    },
    "getUserResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/UserResponse"
      }
    },
    "infoResponse": {
      "description": "InfoResponse response of info request",
      "headers": {
        "message": {
          "type": "string",
          "example": "\"{ \"message\": \"hello, world!\"}\"",
          "description": "Info Message"
        }
      }
    },
    "loginResponse": {
      "description": "tokenReponseBody for json response of signin",
      "schema": {
        "$ref": "#/definitions/tokenResponse"
      }
    },
    "postResourceResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/Resource"
      }
    },
    "removeMemberSuccessResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/endpointSuccess"
      },
      "headers": {
        "Body": {}
      }
    },
    "setRFIDResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/AssignRFIDRequest"
      }
    }
  },
  "securityDefinitions": {
    "bearerAuth": {
      "description": "Enter your bearer token",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}